services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: boilerplate_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-boilerplate}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - boilerplate_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: boilerplate_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - boilerplate_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # REST API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: boilerplate_api
    restart: unless-stopped
    command: /app/api
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
    ports:
      - "${APP_PORT:-8080}:8080"
    volumes:
      - ./uploads:/app/uploads
      - ./videos:/app/videos
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - boilerplate_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # gRPC Service
  grpc:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: boilerplate_grpc
    restart: unless-stopped
    command: /app/grpc
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
    ports:
      - "${GRPC_PORT:-50051}:50051"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - boilerplate_network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: boilerplate_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
      - ./videos:/var/www/videos:ro
    depends_on:
      - api
      - grpc
    networks:
      - boilerplate_network

  # pgAdmin (optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: boilerplate_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - boilerplate_network
    profiles:
      - tools

  # Redis Commander (optional - for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: boilerplate_redis_commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - boilerplate_network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  boilerplate_network:
    driver: bridge